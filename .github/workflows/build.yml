name: Godot build and exports
on: [push, pull_request]

env:
  GODOT_VERSION: 3.3
  EXPORT_NAME: keepassTotp
  CARGO_TERM_COLOR: always
  JAVA_VERSION: 1.8
  ANDROID_VERSION: 30
  ANDROID_NDK_VERSION: 22.1.7171670
  ANDROID_BUILD_TOOLS_VERSION: 30.0.3
  MACOS_SDK_TAR: https://s3.dockerproject.org/darwin/v2/MacOSX10.10.sdk.tar.xz

jobs:
  export-win:
    name: Windows export
    runs-on: ubuntu-latest
    container:
      image: barichello/godot-ci:3.3
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup godot templates
        run: |
          mkdir -v -p ~/.local/share/godot/templates
          mv /root/.local/share/godot/templates/${GODOT_VERSION}.stable ~/.local/share/godot/templates/${GODOT_VERSION}.stable
      - name: Install windows rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-pc-windows-gnu
      - name: Install build essentials
        run: apt-get update && apt-get install -y --no-install-recommends build-essential clang llvm-dev libclang-dev mingw-w64
      - name: Compile native lib for windows
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --manifest-path native/src/Cargo.toml --target x86_64-pc-windows-gnu --release
        env:
          CC: x86_64-w64-mingw32-gcc
          # CARGO_TARGET_X86_64_PC_WINDOWS_GNU_LINKER: x86_64-w64-mingw32-ld
          CARGO_TARGET_DIR: native/target
      - name: Build
        run: |
          mkdir -v -p exports/win
          godot -v --export "Windows" exports/win/${EXPORT_NAME}.exe
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: Windows build
          path: exports/win
          retention-days: 14

  export-lin:
    name: Linux export
    runs-on: ubuntu-latest
    container:
      image: barichello/godot-ci:3.3
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup godot templates
        run: |
          mkdir -v -p ~/.local/share/godot/templates
          mv /root/.local/share/godot/templates/${GODOT_VERSION}.stable ~/.local/share/godot/templates/${GODOT_VERSION}.stable
      - name: Install linux rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-unknown-linux-gnu
      - name: Install build essentials
        run: apt-get update && apt-get install -y --no-install-recommends build-essential clang
      - name: Compile native lib for linux
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --manifest-path native/src/Cargo.toml --target x86_64-unknown-linux-gnu --release
        env:
          CARGO_TARGET_DIR: native/target
      - name: Build
        run: |
          mkdir -v -p exports/lin
          godot -v --export "Linux" exports/lin/${EXPORT_NAME}
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: Linux build
          path: exports/lin
          retention-days: 14

  export-mac:
    name: MacOSX export
    runs-on: ubuntu-latest
    container:
      image: barichello/godot-ci:3.3
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup godot templates
        run: |
          mkdir -v -p ~/.local/share/godot/templates
          mv /root/.local/share/godot/templates/${GODOT_VERSION}.stable ~/.local/share/godot/templates/${GODOT_VERSION}.stable
      - name: Install mac rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-apple-darwin
      - name: Install build essentials
        run: apt-get update && apt-get install -y --no-install-recommends build-essential clang cmake libxml2-dev libz-dev libssl-dev

      - name: Clone osxcross
        uses: actions/checkout@v2
        with:
          repository: 'tpoechtrager/osxcross'
          path: './osxcross'
      - name: Get Macos SDK
        run: wget -P osxcross/tarballs/ -nc ${{env.MACOS_SDK_TAR}}
      - name: Setup cross compiler
        run: ./osxcross/build.sh
        env:
          TARGET_DIR: /osxcross
          OSX_VERSION_MIN: 10.7
          UNATTENDED: yes

      - name: Compile native lib for mac
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --manifest-path native/src/Cargo.toml --target x86_64-apple-darwin --release
        env:
          CC: /osxcross/bin/x86_64-apple-darwin14-cc
          CXX: /osxcross/bin/x86_64-apple-darwin14-c++
          CARGO_TARGET_X86_64_APPLE_DARWIN_LINKER: /osxcross/bin/x86_64-apple-darwin14-cc
          CARGO_TARGET_DIR: native/target
          C_INCLUDE_PATH: /osxcross/SDK/MacOSX10.10.sdk/usr/include
      - name: Build
        run: |
          mkdir -v -p exports/mac
          godot -v --export "Mac" exports/mac/${EXPORT_NAME}
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: MacOSX build
          path: exports/mac
          retention-days: 14

  export-android:
    name: Android export
    runs-on: ubuntu-latest
    container:
      image: barichello/godot-ci:3.3
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup godot templates
        run: |
          mkdir -v -p ~/.local/share/godot/templates
          mv /root/.local/share/godot/templates/${GODOT_VERSION}.stable ~/.local/share/godot/templates/${GODOT_VERSION}.stable
          
      - name: Setup JDK ${{env.JAVA_VERSION}}
        uses: actions/setup-java@v1
        with:
          java-version: ${{env.JAVA_VERSION}}
      - name: Setup Android SDK
        uses: android-actions/setup-android@v2
      - name: Install Android build tools
        run: |
          sdkmanager "build-tools;${ANDROID_BUILD_TOOLS_VERSION}"
          sdkmanager "ndk;${ANDROID_NDK_VERSION}"
          
      - name: Install aarch64 android rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: aarch64-linux-android
      - name: Install x86_64 android rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-linux-android 
      - name: Install build essentials
        run: apt-get update && apt-get install -y --no-install-recommends build-essential clang llvm-dev libclang-dev g++-multilib gcc-multilib libc6-dev libc6-dev-arm64-cross
          
      - name: Compile native lib for aarch64 android
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --manifest-path native/src/Cargo.toml --target aarch64-linux-android --release
        env:
          CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER: ${{env.ANDROID_SDK_ROOT}}/ndk/${{env.ANDROID_NDK_VERSION}}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android${{env.ANDROID_VERSION}}-clang
          CARGO_TARGET_DIR: native/target
      - name: Compile native lib for x86_64 android
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --manifest-path native/src/Cargo.toml --target x86_64-linux-android --release
        env:
          CARGO_TARGET_X86_64_LINUX_ANDROID_LINKER: ${{env.ANDROID_SDK_ROOT}}/ndk/${{env.ANDROID_NDK_VERSION}}/toolchains/llvm/prebuilt/linux-x86_64/bin/x86_64-linux-android${{env.ANDROID_VERSION}}-clang
          CARGO_TARGET_DIR: native/target
      - name: Build
        run: |
          godot -e -q
          echo 'export/android/android_sdk_path = "'${ANDROID_SDK_ROOT}'"' >> ~/.config/godot/editor_settings-3.tres
          echo 'export/android/debug_keystore = "/root/debug.keystore"' >> ~/.config/godot/editor_settings-3.tres
          echo 'export/android/debug_keystore_user = "androiddebugkey"' >> ~/.config/godot/editor_settings-3.tres
          echo 'export/android/debug_keystore_pass = "android"' >> ~/.config/godot/editor_settings-3.tres
          echo 'export/android/force_system_user = false' >> ~/.config/godot/editor_settings-3.tres
          echo 'export/android/shutdown_adb_on_exit = true' >> ~/.config/godot/editor_settings-3.tres
          mkdir -v -p exports/android
          godot -v --export-debug "Android" exports/android/${EXPORT_NAME}.apk
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: Android APK
          path: exports/android
          retention-days: 14

  export-html:
    name: HTML5 export
    runs-on: ubuntu-latest
    container:
      image: barichello/godot-ci:3.3
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup godot templates
        run: |
          mkdir -v -p ~/.local/share/godot/templates
          mv /root/.local/share/godot/templates/${GODOT_VERSION}.stable ~/.local/share/godot/templates/${GODOT_VERSION}.stable

      - name: Install build essentials
        run: apt-get update && apt-get install -y --no-install-recommends build-essential clang python3 xz-utils
      - name: Setup emscripten sdk
        uses: mymindstorm/setup-emsdk@v10

      - name: Install emscripten rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: wasm32-unknown-emscripten
      - name: Compile native lib for wasm
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --manifest-path native/src/Cargo.toml --target wasm32-unknown-emscripten --release --lib
        env:
          CC: emcc
          RUSTFLAGS: -C link-arg="-s STANDALONE_WASM"
          C_INCLUDE_PATH: ${{env.EMSDK}}/upstream/emscripten/cache/sysroot/include/
          
      - name: Build
        run: |
          mkdir -v -p exports/web
          godot -v --export "HTML5" exports/web/${EXPORT_NAME}.html
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: HTML5
          path: exports/web
          retention-days: 14
